seq(1,nchar(x),3)
?seq
x <- "xxyyxyxyz"
substring(x, seq(1,nchar(x),3), seq(3,nchar(x),3))
?substr()
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
setwd("/Users/ginny")
create("SeqQuery")
setwd("./SeqQuery")
document()
setwd("..")
install("SeqQuert")
setwd("..")
install("SeqQuery")
getwd()
setwd("/Users/ginny")
install("SeqQuery")
?nuc_query
setwd("Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
setwd("Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
setwd("Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
setwd("/Users/ginny")
install("SeqQuery")
setwd("Users/ginny/SeqQuery")
document()
getwd()
setwd("Users/ginny/SeqQuery")
setwd("Users/ginny/SeqQuery")
setwd("Users/ginny/SeqQuery")
setwd("Users/ginny/SeqQuery")
getwd()
setwd("/Users/ginny/SeqQuery")
document()
library(roxygen2)
setwd("/Users/ginny/SeqQuery")
document()
library(data.table)
setwd("/Users/ginny/SeqQuery")
document()
?document()
library("devtools")
setwd("/Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
library("devtools")
devtools::install_github("ginnyintifa/SeqQuery")
library(SeqQuery)
166*60
167*60
wseq = c(seq(1:22),"X","Y")
wseq
wchr = paste0("chr", wseq)
wchr
?stop
setwd("/Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
library("devtools")
devtools::install_github("ginnyintifa/SeqQuery")
setwd("/Users/ginny/SeqQuery")
document()
setwd("/Users/ginny")
install("SeqQuery")
?file.rename
sample(seq(1:100),10)
vep_unique_annotation = vep_20 %>%
dplyr::group_by(Location, ID, agg_sample_id) %>%
dplyr::top_n(n = 1, wt = Amino_acids)%>%
set.seed(123)
?barplot
?readLines
2^14
?abline
?text
?abline
?text
?rbind
rbind(1,2,3,4)
?text
?legend
plot(c(0,1), c(0,1), col = 1, type = "l")
plot(c(0,1), c(0,1), col = 2, type = "l")
?rnorm
?matrix
?jitter
get_col = c('#e41a1c80', '#377eb880','#4daf4a80','#984ea380','#ff7f0080','#ffff3380','#a6562880','#f781bf80','#99999980')
plot(x = c(1:9), y = rep(1,9), col = get_col)
plot(x = c(1:9), y = rep(1,9), col = get_col, pch = 16)
?plot
?lines
4/30
2^14
?heatmap.2
??heatmap.2
?abline()
?which
c = c(1,2,1,3,4,NA)
c
which(c>2)
which(c>5)
length(which(c>5))
755*1024/4
755*1024/4/3600
661+9.6*56+1.72*168-4.7*26
1365.36*1.5
2048*0.9
-log10(0.05)
library(dplyr)
library(table.table)
library(magrittr)
scancer = fread("/data/ginny/tcga_pancan/important_files/cancer_type_clinical/SKCM_clinical.tsv",
stringsAsFactors = F)
primary_id = scancer%>%
dplyr::filter(tumor_tissue_site.1 == "Primary Tumor")
cdr = fread("/data/ginny/tcga_pancan/important_files/TCGA_CDR.tsv",
stringsAsFactors = F)
primary_skcm = cdr %>%
dplyr::filter(type == "SKCM")%>%
dplyr::filter(bcr_patient_barcode %in% primary_id$bcr_patient_barcode)
write.table(primary_skcm, "/data/ginny/tcga_pancan/important_files/primary_skcm_cdr.tsv",
quote = F, row.names = F, sep = "\t")
## now use this as the clinical information for SKCM patients
## first mapping of variants somatic and germline to PIUs
### from the result file I will just keep those patients only
somatic_piu = fread("/data/ginny/tcga_pancan/TCGA_all/SKCM_somatic/SKCM_summarise_mutation_201901")
library(dplyr)
library(table.table)
library(magrittr)
scancer = fread("/data/ginny/tcga_pancan/important_files/cancer_type_clinical/SKCM_clinical.tsv",
stringsAsFactors = F)
primary_id = scancer%>%
dplyr::filter(tumor_tissue_site.1 == "Primary Tumor")
cdr = fread("/data/ginny/tcga_pancan/important_files/TCGA_CDR.tsv",
stringsAsFactors = F)
primary_skcm = cdr %>%
dplyr::filter(type == "SKCM")%>%
dplyr::filter(bcr_patient_barcode %in% primary_id$bcr_patient_barcode)
write.table(primary_skcm, "/data/ginny/tcga_pancan/important_files/primary_skcm_cdr.tsv",
quote = F, row.names = F, sep = "\t")
## now use this as the clinical information for SKCM patients
## first mapping of variants somatic and germline to PIUs
### from the result file I will just keep those patients only
somatic_piu = fread("/data/ginny/tcga_pancan/TCGA_all/SKCM_somatic/SKCM_summarise_mutation_201901")
library(dplyr)
library(table.table)
library(magrittr)
2330645/(2330645+1849242)
880/929
369/427
15913/17085
17086-15913
49/929
58/427
1173/17086
10086/18070
51/75
52/74
69/72
log2(1.5)
?wilcox.test
data = c(12,23,12,354,34,6,343,61,234,64,57,45,3547,1343,3,1,3)
length(data)
groupo = c(rep("1",11), rep("2",6))
group = c(rep("1",11), rep("2",6))
group
wt = wilcox.test(data, as.factor(group))
wt = wilcox.test(x = data[1:11], y = data[12:17])
wt
wt$p.value
median(data[1:11])
median(data[12:17])
my_data = fread("/Users/ginny/Google Drive/GinnyNUS/FFPE_skin_proteome/ADNMdatasetfull.txt",
stringsAsFactors = F)
library(data.table)
library(dplyr)
library(magrittr)
my_data = fread("/Users/ginny/Google Drive/GinnyNUS/FFPE_skin_proteome/ADNMdatasetfull.txt",
stringsAsFactors = F)
my_data[1,]
x = 1
this_gene_first = my_data[x, 1:11]
this_gene_second = my_data[x, 12:22]
this_gene_first
this_gene_second
this_wt = wilcox.test(this_gene_first, this_gene_second)
this_gene_first = as.numeric(my_data[x, 1:11])
this_gene_second = as.numeric(my_data[x, 12:22])
this_wt = wilcox.test(this_gene_first, this_gene_second)
first_median = median(this_gene_first)
second_median = median(this_gene_second)
this_df = data.frame(gene = my_data[x,23],
first_median,
second_median,
p_value = this_wt$p.value,
stringsAsFactors = F)
this_Df
this_df
comparison = rbindlist(lapply(1:nrow(my_data), function(x) {
this_gene_first = as.numeric(my_data[x, 1:11])
this_gene_second = as.numeric(my_data[x, 12:22])
this_wt = wilcox.test(this_gene_first, this_gene_second)
first_median = median(this_gene_first)
second_median = median(this_gene_second)
this_df = data.frame(gene = my_data[x,23],
first_median,
second_median,
p_value = this_wt$p.value,
stringsAsFactors = F)
### you can actually add any additional things in the df above
return(this_df)
}))
comparison
library(limma)
install.packages("limma")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
library(limma)
install.packages("edgeR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
BiocManager::install("Glimma")
BiocManager::install("Mus.musculus")
library(limma)
library(Glimma)
library(edgeR)
library(Mus.musculus)
url <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE63310&format=file"
utils::download.file(url, destfile="GSE63310_RAW.tar", mode="wb")
utils::untar("GSE63310_RAW.tar", exdir = ".")
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt", "GSM1545538_purep53.txt",
"GSM1545539_JMS8-2.txt", "GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt",
"GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt", "GSM1545545_JMS9-P8c.txt")
for(i in paste(files, ".gz", sep=""))
R.utils::gunzip(i, overwrite=TRUE)
install.packages("R.utils")
library(R.utils)
for(i in paste(files, ".gz", sep=""))
R.utils::gunzip(i, overwrite=TRUE)
read.delim(files[1], nrow=5)
x <- readDGE(files, columns=c(1,3))
class(x)
x[1,]
samplenames <- substring(colnames(x), 12, nchar(colnames(x)))
samplenames
colnames(x)
colnames(x) <- samplenames
group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP",
"Basal", "ML", "LP"))
x$samples$group <- group
lane <- as.factor(rep(c("L004","L006","L008"), c(3,4,2)))
x$samples$lane <- lane
x$samples
geneid <- rownames(x)
genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"),
keytype="ENTREZID")
head(genes)
genes <- genes[!duplicated(genes$ENTREZID),]
x$genes <- genes
cpm = cpm(x)
lcpm = cpm(x, log  = T)
L <- mean(x$samples$lib.size) * 1e-6
M <- median(x$samples$lib.size) * 1e-6
c(L, M)
table(rowSums(x$counts==0)==9)
keep.exprs <- filterByExpr(x, group=group)
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
dim(x)
x[1,]
lcpm.cutoff <- log2(10/M + 2/L)
library(RColorBrewer)
nsamples <- ncol(x)
col <- brewer.pal(nsamples, "Paired")
par(mfrow=c(1,2))
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main="", xlab="")
title(main="A. Raw data", xlab="Log-cpm")
abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", samplenames, text.col=col, bty="n")
lcpm <- cpm(x, log=TRUE)
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main="", xlab="")
title(main="B. Filtered data", xlab="Log-cpm")
abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", samplenames, text.col=col, bty="n")
x <- calcNormFactors(x, method = "TMM")
x$samples$norm.factors
x2 <- x
x2$samples$norm.factors <- 1
x2$counts[,1] <- ceiling(x2$counts[,1]*0.05)
x2$counts[,2] <- x2$counts[,2]*5
par(mfrow=c(1,2))
lcpm <- cpm(x2, log=TRUE)
boxplot(lcpm, las=2, col=col, main="")
title(main="A. Example: Unnormalised data",ylab="Log-cpm")
x2 <- calcNormFactors(x2)
x2$samples$norm.factors
lcpm <- cpm(x2, log=TRUE)
boxplot(lcpm, las=2, col=col, main="")
title(main="B. Example: Normalised data",ylab="Log-cpm")
lcpm <- cpm(x, log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <-  brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
col.lane <- lane
levels(col.lane) <-  brewer.pal(nlevels(col.lane), "Set2")
col.lane <- as.character(col.lane)
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
plotMDS(lcpm, labels=lane, col=col.lane, dim=c(3,4))
title(main="B. Sequencing lanes")
lcpm <- cpm(x, log=TRUE)
par(mfrow=c(1,2))
col.group <- group
levels(col.group) <-  brewer.pal(nlevels(col.group), "Set1")
col.group <- as.character(col.group)
col.lane <- lane
levels(col.lane) <-  brewer.pal(nlevels(col.lane), "Set2")
col.lane <- as.character(col.lane)
plotMDS(lcpm, labels=group, col=col.group)
title(main="A. Sample groups")
plotMDS(lcpm, labels=lane, col=col.lane, dim=c(3,4))
title(main="B. Sequencing lanes")
design <- model.matrix(~0+group+lane)
colnames(design) <- gsub("group", "", colnames(design))
design
contr.matrix <- makeContrasts(
BasalvsLP = Basal-LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
contr.matrix
par(mfrow=c(1,2))
v <- voom(x, design, plot=TRUE)
v
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean-variance trend")
summary(decideTests(efit))
1
library(dplyr)
library(data.table)
it = c(3,2,NA,2)
i = rbindlist(lapply(1:length(it), function(x) {
t = it[x]
if(!is.na(it[x]))
{
this_t = it[1]+2
this_df = data.frame(t = 1, tt = this_t,
stringsAsFactors = F)
return(this_df)
}
}))
i
it = c(3,2,NA,2)
i = rbindlist(lapply(1:length(it), function(x) {
t = it[x]
if(!is.na(it[x]))
{
this_t = it[x]+2
this_df = data.frame(t = 1, tt = this_t,
stringsAsFactors = F)
return(this_df)
}
}))
i
"dafdfa" == "dfdag"
install.packages("nVennR")
library(nVennR)
myV2 <- createVennObj(nSets = 4, sNames = c("NR", "Hypo", "Biphasic", "Hyper"),
sSizes = c(  0,53,133,5,408,23,28,1,1676 ,43,100 ,4,276,19,27,1))
myV2
showSVG(pV2, opacity = 0.2)
pV2= plotVenn(nVennObj = myV2)
showSVG(pV2, opacity = 0.2)
xx = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0)
xx = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0)
yy = c(1.0000000,1.0706709,1.1524108,1.0434486,0.8909648,0.6184499,
0.4114971,0.4031042,0.3749818,0.3804068)
yest = yy
n = length(yy)
medy = median(yy, na.rm=TRUE)
mady = mad(yy, na.rm=TRUE)
oid = abs(yy - medy) / mady > 5
oid[is.na(oid)] = FALSE
yy[oid] = NA
for(i in 1:n) {
wt = (xx - xx[i]) / k.width
wt = dnorm(wt, 0, 1)
wt[is.na(yy)] = NA
yest[i] = sum(wt * yy, na.rm=TRUE) / sum(wt, na.rm=TRUE)
}
xx = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0)
yy = c(1.0000000,1.0706709,1.1524108,1.0434486,0.8909648,0.6184499,
0.4114971,0.4031042,0.3749818,0.3804068)
k.width = 0.15
yest = yy
n = length(yy)
medy = median(yy, na.rm=TRUE)
mady = mad(yy, na.rm=TRUE)
oid = abs(yy - medy) / mady > 5
oid[is.na(oid)] = FALSE
yy[oid] = NA
for(i in 1:n) {
wt = (xx - xx[i]) / k.width
wt = dnorm(wt, 0, 1)
wt[is.na(yy)] = NA
yest[i] = sum(wt * yy, na.rm=TRUE) / sum(wt, na.rm=TRUE)
}
yest
plot(xx,yy)
lines(xx, yest, type  = "b")
plot(xx,yy, pch = 16, c0l = "red")
plot(xx,yy, pch = 16, col = "red")
warnings()
plot(xx,yy, pch = 16, col = "red")
lines(xx, yest, type  = "b")
k.width = 0.5
yest = yy
n = length(yy)
medy = median(yy, na.rm=TRUE)
mady = mad(yy, na.rm=TRUE)
oid = abs(yy - medy) / mady > 5
oid[is.na(oid)] = FALSE
yy[oid] = NA
for(i in 1:n) {
wt = (xx - xx[i]) / k.width
wt = dnorm(wt, 0, 1)
wt[is.na(yy)] = NA
yest[i] = sum(wt * yy, na.rm=TRUE) / sum(wt, na.rm=TRUE)
}
lines(xx, yest, type  = "b")
k.width = 0.1
yest = yy
n = length(yy)
medy = median(yy, na.rm=TRUE)
mady = mad(yy, na.rm=TRUE)
oid = abs(yy - medy) / mady > 5
oid[is.na(oid)] = FALSE
yy[oid] = NA
for(i in 1:n) {
wt = (xx - xx[i]) / k.width
wt = dnorm(wt, 0, 1)
wt[is.na(yy)] = NA
yest[i] = sum(wt * yy, na.rm=TRUE) / sum(wt, na.rm=TRUE)
}
lines(xx, yest, type  = "b")
plot(xx,yy, pch = 16, col = "red")
lines(xx, yest, type  = "b")
k.width = 0.08
yest = yy
n = length(yy)
medy = median(yy, na.rm=TRUE)
mady = mad(yy, na.rm=TRUE)
oid = abs(yy - medy) / mady > 5
oid[is.na(oid)] = FALSE
yy[oid] = NA
for(i in 1:n) {
wt = (xx - xx[i]) / k.width
wt = dnorm(wt, 0, 1)
wt[is.na(yy)] = NA
yest[i] = sum(wt * yy, na.rm=TRUE) / sum(wt, na.rm=TRUE)
}
plot(xx,yy, pch = 16, col = "red")
lines(xx, yest, type  = "b")
k.width = 0.07
yest = yy
n = length(yy)
medy = median(yy, na.rm=TRUE)
mady = mad(yy, na.rm=TRUE)
oid = abs(yy - medy) / mady > 5
oid[is.na(oid)] = FALSE
yy[oid] = NA
for(i in 1:n) {
wt = (xx - xx[i]) / k.width
wt = dnorm(wt, 0, 1)
wt[is.na(yy)] = NA
yest[i] = sum(wt * yy, na.rm=TRUE) / sum(wt, na.rm=TRUE)
}
plot(xx,yy, pch = 16, col = "red")
lines(xx, yest, type  = "b")
library(roxygen2)
library(devtools)
setwd("/Users/ginny/Google Drive/GinnyNUS/ProteomeNodes")
setwd("/Users/ginny/Google Drive/GinnyNUS/ProteomeNodes")
create("ProteomeNodes")
document()
setwd("/Users/ginny/Google Drive/GinnyNUS/ProteomeNodes_github")
setwd("/Users/ginny/Google Drive/GinnyNUS/ProteomeNodes_github/ProteomeNodes")
document()
